{"version":3,"sources":["services/getResume.js","Components/GetForm.js","Components/UploadForm.js","Pages/Home.js","App.js","reportWebVitals.js","index.js"],"names":["getResume","filename","a","fetch","res","blob","console","log","GetForm","formik","useFormik","initialValues","onSubmit","values","then","file","download","handleSubmit","className","name","htmlFor","type","id","getFieldProps","UploadForm","action","method","encType","value","Home","App","path","component","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uPAeeA,EAZA,uCAAG,WAAOC,GAAP,iBAAAC,EAAA,+EAEQC,MAJb,YAI2BF,GAFtB,cAEJG,EAFI,gBAGSA,EAAIC,OAHb,cAGJA,EAHI,yBAIHA,GAJG,kCAOVC,QAAQC,IAAR,MAPU,0DAAH,sD,eC6DAC,MAxDf,WAEE,IAAMC,EAASC,YAAU,CACvBC,cAAe,CACbV,SAAU,MAGZW,SAAS,WAAD,4BAAE,WAAOC,GAAP,SAAAX,EAAA,sDACRI,QAAQC,IAAIM,GACZb,EAAUa,EAAOZ,UAAUa,MAAK,SAACC,GAC/BC,IAASD,EAAMF,EAAOZ,aAHhB,2CAAF,mDAAC,KA6BX,OACE,uBAAMW,SAAUH,EAAOQ,aAAcC,UAAU,UAAUC,KAAK,UAA9D,UACE,uBAAOC,QAAQ,OAAOF,UAAU,WAAhC,6BAGA,mCACEG,KAAK,OACLF,KAAK,WACLG,GAAG,WACHJ,UAAU,iBACNT,EAAOc,cAAc,cAG3B,wBAAQF,KAAK,SAASH,UAAU,YAAhC,wBCGSM,MAvDf,WA0BE,OACE,uBAEEC,OAAO,UACPC,OAAO,OACPR,UAAU,aACVS,QAAQ,sBACRR,KAAK,aANP,UAQE,uBAAOC,QAAQ,SAASF,UAAU,cAAlC,6BAGA,uBACEG,KAAK,OACLF,KAAK,SACLG,GAAG,SACHJ,UAAU,cAGZ,wBAAQG,KAAK,SAASH,UAAU,YAAYU,MAAM,UAAlD,wBCjCSC,MAZf,WACE,OACE,uBAAMX,UAAU,OAAhB,UACE,oBAAIA,UAAU,QAAd,qBACA,sBAAKA,UAAU,WAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,WCMOY,MAXf,WACE,OACE,qBAAKZ,UAAU,MAAf,SACE,eAAC,IAAD,WACE,cAAC,IAAD,CAAOa,KAAK,IAAIC,UAAWH,EAAMI,OAAK,IACtC,cAAC,IAAD,CAAUF,KAAK,YCCRG,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,UACE,cAAC,EAAD,QAGJC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.0cb47dc2.chunk.js","sourcesContent":["\r\nconst baseUrl = `/api/pdf/`\r\n\r\nconst getResume = async (filename) => {\r\n    try {\r\n        const res = await fetch(baseUrl+filename)\r\n        const blob = await res.blob() // we use fetch here so that we can use the blob method to convert to file\r\n        return blob;\r\n    }\r\n    catch (err){\r\n        console.log(err)\r\n    }\r\n}\r\n\r\n\r\nexport default getResume;","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport download from \"downloadjs\";\r\n\r\nimport getResume from \"../services/getResume\";\r\n\r\nimport { useFormik } from \"formik\";\r\n\r\nfunction GetForm() {\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      filename: null,\r\n    },\r\n\r\n    onSubmit: async (values) => {\r\n      console.log(values);\r\n      getResume(values.filename).then((file) => {\r\n        download(file, values.filename);\r\n\r\n      });\r\n      /* axios\r\n        .get(`/api/pdf/${values.filename}`, {\r\n          file: values.filename,\r\n        })\r\n        .then((res) => {\r\n          console.log(res.data);\r\n          const blob = res.blob()\r\n          download(blob, 'Sample')\r\n        }) \r\n        .catch((err) => {\r\n          // error message\r\n        }); */\r\n    },\r\n    // validate: (values) => {\r\n    //   let errors = {};\r\n\r\n    //   if (!values.filename) {\r\n    //     errors.filename = \"Required\";\r\n    //   }\r\n    //   return errors;\r\n    // },\r\n  });\r\n\r\n  return (\r\n    <form onSubmit={formik.handleSubmit} className=\"getForm\" name=\"getForm\">\r\n      <label htmlFor=\"file\" className=\"getLabel\">\r\n        Get your Resume\r\n      </label>\r\n      <input\r\n        type=\"test\"\r\n        name=\"filename\"\r\n        id=\"filename\"\r\n        className=\"filenameInput\"\r\n        {...formik.getFieldProps(\"filename\")}\r\n      />\r\n\r\n      <button type=\"submit\" className=\"submitBtn\">\r\n        Submit\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default GetForm;\r\n\r\n/*if (pdf) {\r\n    return (\r\n      <a href={pdf} without rel=\"noopener noreferrer\" target=\"_blank\">\r\n        <button trailingIcon=\"picture_as_pdf\" label=\"Resume\">\r\n          PDF\r\n        </button>\r\n      </a>\r\n    );\r\n  } */","import React from \"react\";\r\nimport axios from \"axios\";\r\n\r\n// import { useFormik } from \"formik\";\r\n\r\nfunction UploadForm() {\r\n  // const formik = useFormik({\r\n  //   initialValues: {\r\n  //     resume: null,\r\n  //   },\r\n  //   onSubmit: (values) => {\r\n  //     console.log(values);\r\n  //     axios\r\n  //       .post(`/upload`, {\r\n  //         files: {\r\n  //           resume: values.resume.name,\r\n  //         },\r\n  //       })\r\n  //       .then((res) => {\r\n  //         console.log(res);\r\n  //       });\r\n  //   },\r\n  // validate: (values) => {\r\n  //   let errors = {};\r\n\r\n  //   if (!values.file) {\r\n  //     errors.file = \"Required\";\r\n  //   }\r\n  //   return errors;\r\n  // },\r\n  // });\r\n  return (\r\n    <form\r\n      // onSubmit={formik.handleSubmit}\r\n      action=\"/upload\"\r\n      method=\"post\"\r\n      className=\"uploadForm\"\r\n      encType=\"multipart/form-data\"\r\n      name=\"uploadForm\"\r\n    >\r\n      <label htmlFor=\"resume\" className=\"uploadLabel\">\r\n        Upload your PDF\r\n      </label>\r\n      <input\r\n        type=\"file\"\r\n        name=\"resume\"\r\n        id=\"resume\"\r\n        className=\"fileInput\"\r\n        // {...formik.getFieldProps(\"resume\")}\r\n      />\r\n      <button type=\"submit\" className=\"submitBtn\" value=\"Upload!\">\r\n        Upload\r\n      </button>\r\n      {/* {formik.errors.file && formik.touched.file && (\r\n        <div className=\"uploadForm__error\">{formik.errors.file}</div>\r\n      )} */}\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default UploadForm;\r\n","import React from \"react\";\r\n\r\nimport GetForm from \"../Components/GetForm\";\r\nimport UploadForm from \"../Components/UploadForm\";\r\n\r\nfunction Home() {\r\n  return (\r\n    <main className=\"home\">\r\n      <h1 className=\"title\">resu.me</h1>\r\n      <div className=\"features\">\r\n        <GetForm />\r\n        <UploadForm />\r\n      </div>\r\n    </main>\r\n  );\r\n}\r\n\r\nexport default Home;\r\n","// React Router\r\nimport { Redirect, Route, Switch } from \"react-router-dom\";\r\n\r\n// Pages\r\nimport Home from \"./Pages/Home\";\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"app\">\r\n      <Switch>\r\n        <Route path=\"/\" component={Home} exact />\r\n        <Redirect path=\"/\" />\r\n      </Switch>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./scss/main.scss\";\r\nimport { BrowserRouter as Router } from \"react-router-dom\";\r\nimport App from \"./App\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Router>\r\n      <App />\r\n    </Router>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}